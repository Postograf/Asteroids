//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Inputs/SpaceshipInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceshipInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceshipInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceshipInputs"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""4e82c934-32ed-410d-a9d8-c077ef483360"",
            ""actions"": [
                {
                    ""name"": ""BulletAttack"",
                    ""type"": ""Button"",
                    ""id"": ""044fe9de-2db2-4b45-9743-0d0c1289ad58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LaserAttack"",
                    ""type"": ""Button"",
                    ""id"": ""2922f0c4-05a9-4685-9c6e-bc438ce476f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""cf547f6b-9e06-4b8c-9fc0-8cad1c6d8293"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseTracking"",
                    ""type"": ""Value"",
                    ""id"": ""3b950dc4-06d7-41a8-8556-418d766e4cd0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10f88c79-c566-4a17-805a-1bf9b1e37238"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BulletAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b13b709-ffce-44bb-9b61-7f28c7c599ff"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""LaserAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11854531-c106-458e-a841-aae9a6bf32ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""142b06ff-77e8-4e37-aa08-821b675e2958"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MouseTracking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_BulletAttack = m_Game.FindAction("BulletAttack", throwIfNotFound: true);
        m_Game_LaserAttack = m_Game.FindAction("LaserAttack", throwIfNotFound: true);
        m_Game_MoveForward = m_Game.FindAction("MoveForward", throwIfNotFound: true);
        m_Game_MouseTracking = m_Game.FindAction("MouseTracking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_BulletAttack;
    private readonly InputAction m_Game_LaserAttack;
    private readonly InputAction m_Game_MoveForward;
    private readonly InputAction m_Game_MouseTracking;
    public struct GameActions
    {
        private @SpaceshipInputs m_Wrapper;
        public GameActions(@SpaceshipInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @BulletAttack => m_Wrapper.m_Game_BulletAttack;
        public InputAction @LaserAttack => m_Wrapper.m_Game_LaserAttack;
        public InputAction @MoveForward => m_Wrapper.m_Game_MoveForward;
        public InputAction @MouseTracking => m_Wrapper.m_Game_MouseTracking;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @BulletAttack.started -= m_Wrapper.m_GameActionsCallbackInterface.OnBulletAttack;
                @BulletAttack.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnBulletAttack;
                @BulletAttack.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnBulletAttack;
                @LaserAttack.started -= m_Wrapper.m_GameActionsCallbackInterface.OnLaserAttack;
                @LaserAttack.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnLaserAttack;
                @LaserAttack.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnLaserAttack;
                @MoveForward.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMoveForward;
                @MouseTracking.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseTracking;
                @MouseTracking.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseTracking;
                @MouseTracking.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseTracking;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BulletAttack.started += instance.OnBulletAttack;
                @BulletAttack.performed += instance.OnBulletAttack;
                @BulletAttack.canceled += instance.OnBulletAttack;
                @LaserAttack.started += instance.OnLaserAttack;
                @LaserAttack.performed += instance.OnLaserAttack;
                @LaserAttack.canceled += instance.OnLaserAttack;
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
                @MouseTracking.started += instance.OnMouseTracking;
                @MouseTracking.performed += instance.OnMouseTracking;
                @MouseTracking.canceled += instance.OnMouseTracking;
            }
        }
    }
    public GameActions @Game => new GameActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IGameActions
    {
        void OnBulletAttack(InputAction.CallbackContext context);
        void OnLaserAttack(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
        void OnMouseTracking(InputAction.CallbackContext context);
    }
}
